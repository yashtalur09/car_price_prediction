# -*- coding: utf-8 -*-
"""carprice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16XhYOBaOf6UrMS_voREzXehDQN1UPJCc
"""

import warnings

warnings.filterwarnings('ignore')
import pandas as pd
data = pd.read_csv('car data.xls')

data.head()

data.tail()

import datetime
date_time = datetime.datetime.now()
data['Age']=date_time.year - data['Year']

data.head()

data.drop('Year',axis=1,inplace=True)
data.head()

import seaborn as sns
sns.boxplot(data['Selling_Price'])

sorted(data['Selling_Price'],reverse=True)

data = data[~(data['Selling_Price']>=33.0) & (data['Selling_Price']<=35.0)]
data.shape

data['Fuel_Type'] = data['Fuel_Type'].map({'Petrol':0,'Diesel':1,'CNG':2})
data['Fuel_Type'].unique()

data['Seller_Type'] = data['Seller_Type'].map({'Dealer':0,'Individual':1})
data['Seller_Type'].unique()

data['Transmission'] =data['Transmission'].map({'Manual':0,'Automatic':1})
data['Transmission'].unique()

X = data.drop(['Car_Name','Selling_Price'],axis=1)
y = data['Selling_Price']
y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from xgboost import XGBRegressor

lr = LinearRegression()
lr.fit(X_train,y_train)

rf = RandomForestRegressor()
rf.fit(X_train,y_train)

xgb = GradientBoostingRegressor()
xgb.fit(X_train,y_train)

xg = XGBRegressor()
xg.fit(X_train,y_train)

y_pred1 = lr.predict(X_test)
y_pred2 = rf.predict(X_test)
y_pred3 = xgb.predict(X_test)
y_pred4 = xg.predict(X_test)

from sklearn import metrics
score1 = metrics.r2_score(y_test,y_pred1)
score2 = metrics.r2_score(y_test,y_pred2)
score3 = metrics.r2_score(y_test,y_pred3)
score4 = metrics.r2_score(y_test,y_pred4)

print(score1,score2,score3,score4)

final_data = pd.DataFrame({'Models':['LR','RF','GBR','XG'],
             "R2_SCORE":[score1,score2,score3,score4]})
final_data

sns.barplot(x='Models', y='R2_SCORE', data=final_data)

xg = XGBRegressor()
xg_final = xg.fit(X,y)

import joblib
joblib.dump(xg_final,'car_price_predictor')

model = joblib.load('car_price_predictor')

import pandas as pd
data_new = pd.DataFrame({
    'Present_Price':5.59,
    'Kms_Driven':27000,
    'Fuel_Type':0,
    'Seller_Type':0,
    'Transmission':0,
    'Owner':0,
    'Age':8
},index=[0])

model.predict(data_new)

import joblib
import pandas as pd

# Load the trained model
model = joblib.load('car_price_predictor')

# Function to predict car price
def predict_car_price(Present_Price, Kms_Driven, Fuel_Type, Seller_Type, Transmission, Owner, Age):
    """
    Predicts the car price using the loaded model.

    Args:
        Present_Price (float): The current price of the car.
        Kms_Driven (float): The kilometers driven by the car.
        Fuel_Type (int): The fuel type of the car (0: Petrol, 1: Diesel, 2: CNG).
        Seller_Type (int): The type of seller (0: Dealer, 1: Individual).
        Transmission (int): The transmission type (0: Manual, 1: Automatic).
        Owner (int): The number of previous owners.
        Age (int): The age of the car.

    Returns:
        float: The predicted price of the car.
    """
    data_new = pd.DataFrame({
        'Present_Price': [Present_Price],
        'Kms_Driven': [Kms_Driven],
        'Fuel_Type': [Fuel_Type],
        'Seller_Type': [Seller_Type],
        'Transmission': [Transmission],
        'Owner': [Owner],
        'Age': [Age]
    })
    result = model.predict(data_new)
    return result[0]

# Get user inputs
Present_Price = float(input("Enter Present_Price: "))
Kms_Driven = float(input("Enter Kms_Driven: "))
Fuel_Type = int(input("Enter Fuel_Type (0: Petrol, 1: Diesel, 2: CNG): "))
Seller_Type = int(input("Enter Seller_Type (0: Dealer, 1: Individual): "))
Transmission = int(input("Enter Transmission (0: Manual, 1: Automatic): "))
Owner = int(input("Enter Owner: "))
Age = int(input("Enter Age: "))

# Predict and print the result
predicted_price = predict_car_price(Present_Price, Kms_Driven, Fuel_Type, Seller_Type, Transmission, Owner, Age)
print("Predicted Car Purchase amount:", predicted_price)